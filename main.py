#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Aplicaci√≥n principal del sistema de gesti√≥n de agua potable
"""

import tkinter as tk
from tkinter import messagebox, ttk
import os
from PIL import Image, ImageTk
from auth import authenticate
from user_management import UserManagementWindow
from payment_registration import PaymentRegistrationWindow
from configuration import ConfigurationWindow

class MainApplication:
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("üíß Sistema de Gesti√≥n de Agua Potable - Versi√≥n Profesional")
        self.root.geometry("900x650")
        self.root.resizable(True, True)
        
        # Colores mejorados pero compatibles
        self.colors = {
            'primary': '#2980b9',      # Azul profesional
            'secondary': '#3498db',    # Azul claro
            'success': '#27ae60',      # Verde
            'warning': '#f39c12',      # Naranja
            'danger': '#e74c3c',       # Rojo
            'dark': '#2c3e50',         # Azul oscuro
            'light': '#ecf0f1',        # Gris claro
            'white': '#ffffff'         # Blanco
        }
        
        # Configurar el icono de la ventana (si existe)
        self.set_window_icon()
        
        # Centrar la ventana
        self.center_window()
        
        # Variables
        self.logo_image = None
        self.example_image = None
        
        # Configurar la interfaz mejorada
        self.setup_improved_ui()
        
        # Configurar eventos
        self.root.protocol("WM_DELETE_WINDOW", self.on_closing)
    
    def create_improved_menu(self):
        """Crea la barra de men√∫ mejorada"""
        menubar = tk.Menu(self.root, 
                         bg=self.colors['white'], 
                         fg=self.colors['dark'],
                         activebackground=self.colors['primary'],
                         activeforeground=self.colors['white'],
                         font=('Segoe UI', 9))
        self.root.config(menu=menubar)
        
        # Men√∫ Sistema con mejor dise√±o
        system_menu = tk.Menu(menubar, tearoff=0,
                             bg=self.colors['white'],
                             fg=self.colors['dark'],
                             activebackground=self.colors['primary'],
                             activeforeground=self.colors['white'])
        menubar.add_cascade(label="üè† Sistema", menu=system_menu)
        system_menu.add_command(label="üè† Men√∫ Principal", command=self.show_main_window)
        system_menu.add_separator()
        system_menu.add_command(label="üìä Importar CSV", command=self.open_csv_importer)
        system_menu.add_separator()
        system_menu.add_command(label="üö™ Salir", command=self.on_closing)
        
        # Men√∫ M√≥dulos
        modules_menu = tk.Menu(menubar, tearoff=0,
                              bg=self.colors['white'],
                              fg=self.colors['dark'],
                              activebackground=self.colors['primary'],
                              activeforeground=self.colors['white'])
        menubar.add_cascade(label="‚öôÔ∏è M√≥dulos", menu=modules_menu)
        modules_menu.add_command(label="üë• Gesti√≥n de Usuarios", command=self.open_user_management)
        modules_menu.add_command(label="üí∞ Registro de Pagos", command=self.open_payment_registration)
        modules_menu.add_command(label="‚öôÔ∏è Configuraci√≥n del Sistema", command=self.open_configuration)
        
        # Men√∫ Ayuda
        help_menu = tk.Menu(menubar, tearoff=0,
                           bg=self.colors['white'],
                           fg=self.colors['dark'],
                           activebackground=self.colors['primary'],
                           activeforeground=self.colors['white'])
        menubar.add_cascade(label="‚ùì Ayuda", menu=help_menu)
        help_menu.add_command(label="üìñ Instrucciones de Uso", command=self.show_instructions)
        help_menu.add_command(label="‚ÑπÔ∏è Acerca del Sistema", command=self.show_about)
    
    def set_window_icon(self):
        """Configura el icono de la ventana si existe"""
        try:
            if os.path.exists("logo.jpg"):
                # Convertir JPG a ICO si es necesario
                img = Image.open("logo.jpg")
                img = img.resize((32, 32), Image.Resampling.LANCZOS)
                # En Windows, podemos usar el archivo directamente
                # self.root.iconbitmap("logo.ico")  # Si tuvi√©ramos un ICO
        except Exception as e:
            print(f"No se pudo configurar el icono: {e}")
    
    def center_window(self):
        """Centra la ventana en la pantalla"""
        self.root.update_idletasks()
        width = self.root.winfo_width()
        height = self.root.winfo_height()
        x = (self.root.winfo_screenwidth() // 2) - (width // 2)
        y = (self.root.winfo_screenheight() // 2) - (height // 2)
        self.root.geometry(f'{width}x{height}+{x}+{y}')
    
    def setup_improved_ui(self):
        """Configura la interfaz de usuario mejorada"""
        # Configurar el fondo principal
        self.root.configure(bg=self.colors['light'])
        
        # Crear men√∫ mejorado
        self.create_improved_menu()
        
        # Frame principal con mejor dise√±o
        main_frame = tk.Frame(self.root, bg=self.colors['light'])
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # Header profesional con logo destacado
        self.create_professional_header(main_frame)
        
        # √Årea central con m√≥dulos mejorados
        self.create_improved_modules_area(main_frame)
        
        # Footer elegante
        self.create_elegant_footer(main_frame)
    
    def create_professional_header(self, parent):
        """Crea el encabezado profesional mejorado"""
        # Header con dise√±o elegante
        header_frame = tk.Frame(parent, bg=self.colors['dark'], height=140)
        header_frame.pack(fill=tk.X)
        header_frame.pack_propagate(False)
        
        # L√≠nea decorativa superior
        top_line = tk.Frame(header_frame, bg=self.colors['primary'], height=4)
        top_line.pack(fill=tk.X)
        
        # Contenido del header
        content_frame = tk.Frame(header_frame, bg=self.colors['dark'])
        content_frame.pack(fill=tk.BOTH, expand=True, padx=30, pady=15)
        
        # Panel izquierdo - Logo destacado
        left_panel = tk.Frame(content_frame, bg=self.colors['dark'])
        left_panel.pack(side=tk.LEFT, fill=tk.Y)
        
        # Cargar y mostrar logo con mejor presentaci√≥n
        if os.path.exists("logo.jpg"):
            try:
                logo_img = Image.open("logo.jpg")
                # Logo m√°s grande y visible
                logo_img = logo_img.resize((100, 100), Image.Resampling.LANCZOS)
                self.logo_image = ImageTk.PhotoImage(logo_img)
                
                # Frame para el logo con borde elegante
                logo_container = tk.Frame(left_panel, bg=self.colors['white'], relief='solid', bd=2)
                logo_container.pack(padx=(0, 25), pady=5)
                
                logo_label = tk.Label(
                    logo_container,
                    image=self.logo_image,
                    bg=self.colors['white']
                )
                logo_label.pack(padx=5, pady=5)
                
            except Exception as e:
                print(f"Error al cargar logo: {e}")
                # Logo por defecto si no se puede cargar
                default_logo = tk.Label(
                    left_panel,
                    text="üíß\nLOGO",
                    font=('Segoe UI', 16, 'bold'),
                    fg=self.colors['primary'],
                    bg=self.colors['dark'],
                    justify=tk.CENTER
                )
                default_logo.pack(padx=(0, 25))
        
        # Panel derecho - Informaci√≥n de la empresa
        right_panel = tk.Frame(content_frame, bg=self.colors['dark'])
        right_panel.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        
        # T√≠tulo principal m√°s prominente
        title_label = tk.Label(
            right_panel,
            text="üíß SISTEMA DE GESTI√ìN DE AGUA POTABLE",
            font=('Segoe UI', 18, 'bold'),
            fg=self.colors['white'],
            bg=self.colors['dark']
        )
        title_label.pack(anchor='w', pady=(5, 0))
        
        # Subt√≠tulo de la empresa
        company_label = tk.Label(
            right_panel,
            text="üè¢ COMIT√â DE AGUA POTABLE - GESTI√ìN PROFESIONAL",
            font=('Segoe UI', 12, 'bold'),
            fg=self.colors['secondary'],
            bg=self.colors['dark']
        )
        company_label.pack(anchor='w', pady=(5, 0))
        
        # L√≠nea separadora
        separator = tk.Frame(right_panel, bg=self.colors['primary'], height=2)
        separator.pack(fill=tk.X, pady=(8, 8))
        
        # Informaci√≥n adicional
        info_label = tk.Label(
            right_panel,
            text="‚ú® Versi√≥n Profesional 2.0 | üêç Powered by Python",
            font=('Segoe UI', 10),
            fg='#bdc3c7',
            bg=self.colors['dark']
        )
        info_label.pack(anchor='w')
        
        # Status de conexi√≥n
        status_label = tk.Label(
            right_panel,
            text="üü¢ Sistema Activo ‚Ä¢ Base de Datos Conectada",
            font=('Segoe UI', 9, 'bold'),
            fg=self.colors['success'],
            bg=self.colors['dark']
        )
        status_label.pack(anchor='w', pady=(5, 0))
    
    def create_improved_modules_area(self, parent):
        """Crea el √°rea central con m√≥dulos mejorados"""
        modules_frame = tk.Frame(parent, bg=self.colors['light'])
        modules_frame.pack(fill=tk.BOTH, expand=True, padx=30, pady=25)
        
        # T√≠tulo de la secci√≥n m√°s elegante
        title_container = tk.Frame(modules_frame, bg=self.colors['white'], relief='solid', bd=1)
        title_container.pack(fill=tk.X, pady=(0, 25))
        
        section_title = tk.Label(
            title_container,
            text="üéØ M√ìDULOS DEL SISTEMA PROFESIONAL",
            font=('Segoe UI', 16, 'bold'),
            fg=self.colors['dark'],
            bg=self.colors['white']
        )
        section_title.pack(pady=12)
        
        # Frame para los botones de m√≥dulos con mejor dise√±o
        buttons_frame = tk.Frame(modules_frame, bg=self.colors['light'])
        buttons_frame.pack(expand=True)
        
        # Configurar grid para mejor distribuci√≥n
        for i in range(2):
            buttons_frame.grid_rowconfigure(i, weight=1)
            buttons_frame.grid_columnconfigure(i, weight=1)
        
        # M√≥dulo 1: Gesti√≥n de Usuarios (mejorado)
        self.create_improved_module_button(
            buttons_frame,
            "üë•",
            "GESTI√ìN DE\nUSUARIOS",
            "Administraci√≥n completa de usuarios\n‚Ä¢ Crear y editar usuarios\n‚Ä¢ B√∫squeda avanzada\n‚Ä¢ Control de estados",
            self.open_user_management,
            self.colors['primary'],
            0, 0
        )
        
        # M√≥dulo 2: Registro de Pagos (mejorado)
        self.create_improved_module_button(
            buttons_frame,
            "üí∞",
            "REGISTRO DE\nPAGOS",
            "Control financiero profesional\n‚Ä¢ Pagos mensuales\n‚Ä¢ Conceptos adicionales\n‚Ä¢ Recibos autom√°ticos",
            self.open_payment_registration,
            self.colors['success'],
            0, 1
        )
        
        # M√≥dulo 3: Configuraci√≥n (mejorado)
        self.create_improved_module_button(
            buttons_frame,
            "‚öôÔ∏è",
            "CONFIGURACI√ìN\nDEL SISTEMA",
            "Personalizaci√≥n avanzada\n‚Ä¢ Gesti√≥n de tarifas\n‚Ä¢ Conceptos de cobro\n‚Ä¢ Respaldos autom√°ticos",
            self.open_configuration,
            self.colors['warning'],
            1, 0
        )
        
        # M√≥dulo 4: Importar CSV (√∫til)
        self.create_improved_module_button(
            buttons_frame,
            "üìä",
            "IMPORTAR\nDATOS CSV",
            "Migraci√≥n de datos externa\n‚Ä¢ Importar usuarios masivamente\n‚Ä¢ Validaci√≥n autom√°tica\n‚Ä¢ Reportes de importaci√≥n",
            self.open_csv_importer,
            self.colors['danger'],
            1, 1
        )
    
    def create_improved_module_button(self, parent, icon, title, description, command, color, row, col):
        """Crea un bot√≥n mejorado para m√≥dulos"""
        # Contenedor principal con sombra simulada
        container = tk.Frame(parent, bg=self.colors['light'])
        container.grid(row=row, column=col, padx=15, pady=15, sticky='nsew')
        
        # Frame del bot√≥n con bordes elegantes
        button_frame = tk.Frame(container, bg=self.colors['white'], relief='solid', bd=2)
        button_frame.pack(fill=tk.BOTH, expand=True, padx=3, pady=3)
        
        # √Årea del icono
        icon_frame = tk.Frame(button_frame, bg=color, height=80)
        icon_frame.pack(fill=tk.X)
        icon_frame.pack_propagate(False)
        
        icon_label = tk.Label(
            icon_frame,
            text=icon,
            font=('Segoe UI Emoji', 32),
            fg=self.colors['white'],
            bg=color
        )
        icon_label.pack(expand=True)
        
        # √Årea del contenido
        content_frame = tk.Frame(button_frame, bg=self.colors['white'])
        content_frame.pack(fill=tk.BOTH, expand=True, padx=15, pady=15)
        
        # T√≠tulo del m√≥dulo
        title_label = tk.Label(
            content_frame,
            text=title,
            font=('Segoe UI', 12, 'bold'),
            fg=self.colors['dark'],
            bg=self.colors['white'],
            justify=tk.CENTER
        )
        title_label.pack(pady=(0, 8))
        
        # Descripci√≥n detallada
        desc_label = tk.Label(
            content_frame,
            text=description,
            font=('Segoe UI', 9),
            fg='#7f8c8d',
            bg=self.colors['white'],
            wraplength=200,
            justify=tk.LEFT
        )
        desc_label.pack(pady=(0, 12))
        
        # Bot√≥n de acci√≥n
        action_button = tk.Button(
            content_frame,
            text="üöÄ ACCEDER",
            command=command,
            font=('Segoe UI', 10, 'bold'),
            bg=color,
            fg=self.colors['white'],
            relief='flat',
            cursor='hand2',
            padx=20,
            pady=8
        )
        action_button.pack(fill=tk.X)
        
        # Efectos hover mejorados
        def on_enter(e):
            button_frame.config(relief='raised', bd=3)
            action_button.config(bg=self.darken_color(color))
        
        def on_leave(e):
            button_frame.config(relief='solid', bd=2)
            action_button.config(bg=color)
        
        def on_click(e):
            command()
        
        # Bind eventos a todos los elementos para mejor UX
        for widget in [button_frame, icon_frame, icon_label, content_frame, title_label, desc_label]:
            widget.bind("<Enter>", on_enter)
            widget.bind("<Leave>", on_leave)
            widget.bind("<Button-1>", on_click)
    
    def create_elegant_footer(self, parent):
        """Crea el pie de la aplicaci√≥n elegante"""
        # Footer con dise√±o profesional
        footer_frame = tk.Frame(parent, bg=self.colors['dark'], height=70)
        footer_frame.pack(fill=tk.X, side=tk.BOTTOM)
        footer_frame.pack_propagate(False)
        
        # L√≠nea decorativa superior
        top_line = tk.Frame(footer_frame, bg=self.colors['primary'], height=3)
        top_line.pack(fill=tk.X)
        
        # Contenido del footer
        info_frame = tk.Frame(footer_frame, bg=self.colors['dark'])
        info_frame.pack(fill=tk.BOTH, expand=True, padx=25, pady=12)
        
        # Panel izquierdo - Informaci√≥n del sistema
        left_info = tk.Frame(info_frame, bg=self.colors['dark'])
        left_info.pack(side=tk.LEFT, fill=tk.Y)
        
        system_info = tk.Label(
            left_info,
            text="üíß Sistema Profesional de Gesti√≥n de Agua Potable",
            font=('Segoe UI', 10, 'bold'),
            fg=self.colors['white'],
            bg=self.colors['dark']
        )
        system_info.pack(anchor='w')
        
        dev_info = tk.Label(
            left_info,
            text="üè¢ Desarrollado especialmente para comit√©s de agua potable",
            font=('Segoe UI', 9),
            fg='#bdc3c7',
            bg=self.colors['dark']
        )
        dev_info.pack(anchor='w', pady=(2, 0))
        
        # Panel derecho - Estado del sistema
        right_info = tk.Frame(info_frame, bg=self.colors['dark'])
        right_info.pack(side=tk.RIGHT, fill=tk.Y)
        
        status_info = tk.Label(
            right_info,
            text="üü¢ Sistema Operativo ‚Ä¢ Base de Datos Activa",
            font=('Segoe UI', 10, 'bold'),
            fg=self.colors['success'],
            bg=self.colors['dark']
        )
        status_info.pack(anchor='e')
        
        version_info = tk.Label(
            right_info,
            text="‚ö° Versi√≥n 2.0 Professional Edition",
            font=('Segoe UI', 9),
            fg=self.colors['secondary'],
            bg=self.colors['dark']
        )
        version_info.pack(anchor='e', pady=(2, 0))
    
    def darken_color(self, color):
        """Oscurece un color hexadecimal para efectos hover"""
        color_map = {
            self.colors['primary']: "#1f5a8c",      # Azul m√°s oscuro
            self.colors['secondary']: "#2980b9",    # Azul oscuro
            self.colors['success']: "#1e8449",      # Verde oscuro
            self.colors['warning']: "#d68910",      # Naranja oscuro
            self.colors['danger']: "#c0392b",       # Rojo oscuro
            "#3498db": "#2980b9",
            "#27ae60": "#229954",
            "#e74c3c": "#c0392b",
            "#9b59b6": "#8e44ad"
        }
        return color_map.get(color, color)
    
    # === FUNCIONES DE NAVEGACI√ìN ===
    
    def open_user_management(self):
        """Abre el m√≥dulo de gesti√≥n de usuarios"""
        try:
            UserManagementWindow(self.root)
        except Exception as e:
            messagebox.showerror("Error", f"Error al abrir gesti√≥n de usuarios: {str(e)}")
    
    def open_payment_registration(self):
        """Abre el m√≥dulo de registro de pagos"""
        try:
            PaymentRegistrationWindow(self.root)
        except Exception as e:
            messagebox.showerror("Error", f"Error al abrir registro de pagos: {str(e)}")
    
    def open_configuration(self):
        """Abre el m√≥dulo de configuraci√≥n"""
        try:
            ConfigurationWindow(self.root)
        except Exception as e:
            messagebox.showerror("Error", f"Error al abrir configuraci√≥n: {str(e)}")
    
    def show_reports_placeholder(self):
        """Muestra un placeholder para el m√≥dulo de reportes"""
        messagebox.showinfo(
            "M√≥dulo en Desarrollo",
            "El m√≥dulo de Reportes y Estad√≠sticas estar√° disponible en una pr√≥xima actualizaci√≥n.\n\n" +
            "Caracter√≠sticas planificadas:\n" +
            "‚Ä¢ Reportes de pagos por per√≠odo\n" +
            "‚Ä¢ Estad√≠sticas de ingresos\n" +
            "‚Ä¢ Listados de usuarios morosos\n" +
            "‚Ä¢ Gr√°ficos de tendencias\n" +
            "‚Ä¢ Exportaci√≥n a Excel/PDF"
        )
    
    def show_main_window(self):
        """Muestra la ventana principal"""
        self.root.deiconify()  # Mostrar la ventana si est√° minimizada
        self.root.lift()       # Traer al frente
        self.root.focus_force() # Dar foco
    
    def open_csv_importer(self):
        """Abre el importador de CSV"""
        try:
            from csv_importer import ImporterGUI
            importer = ImporterGUI()
            importer.run()
        except Exception as e:
            messagebox.showerror("Error", f"Error al abrir importador CSV: {str(e)}")
    
    def show_instructions(self):
        """Muestra las instrucciones del sistema"""
        instructions_window = tk.Toplevel(self.root)
        instructions_window.title("Instrucciones de Uso")
        instructions_window.geometry("600x500")
        instructions_window.resizable(True, True)
        
        # Frame con scroll
        canvas = tk.Canvas(instructions_window)
        scrollbar = ttk.Scrollbar(instructions_window, orient="vertical", command=canvas.yview)
        scrollable_frame = tk.Frame(canvas)
        
        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )
        
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        # Contenido de instrucciones
        instructions_text = """
INSTRUCCIONES DE USO - SISTEMA DE AGUA POTABLE

1. GESTI√ìN DE USUARIOS
   ‚Ä¢ Nuevo Usuario: Crear usuarios con n√∫mero, nombre, direcci√≥n, etc.
   ‚Ä¢ Buscar: Por n√∫mero o nombre en tiempo real
   ‚Ä¢ Editar: Doble clic en usuario para modificar datos
   ‚Ä¢ Estado: Cambiar entre Activo/Cancelado
   ‚Ä¢ Historial: Ver todos los pagos de un usuario

2. REGISTRO DE PAGOS
   ‚Ä¢ Buscar usuario por n√∫mero o nombre
   ‚Ä¢ Seleccionar a√±o con las flechas
   ‚Ä¢ Clic en meses para marcar como pagados
   ‚Ä¢ Agregar conceptos adicionales (cooperaciones, multas)
   ‚Ä¢ Procesar pago y generar recibo autom√°ticamente

3. CONFIGURACI√ìN
   ‚Ä¢ Cuota Mensual: Modificar precio mensual del servicio
   ‚Ä¢ Conceptos: Agregar/editar conceptos adicionales de cobro
   ‚Ä¢ Informaci√≥n: Datos del comit√© para recibos
   ‚Ä¢ Seguridad: Cambiar PIN de acceso
   ‚Ä¢ Respaldos: Crear y restaurar copias de seguridad

4. ATAJOS DE TECLADO
   ‚Ä¢ Enter: Confirmar en di√°logos
   ‚Ä¢ Escape: Cancelar operaciones
   ‚Ä¢ Ctrl+N: Nuevo usuario (en m√≥dulo usuarios)
   ‚Ä¢ F5: Actualizar listas

5. CONSEJOS
   ‚Ä¢ Crear respaldos regularmente
   ‚Ä¢ Cambiar el PIN por defecto (1234)
   ‚Ä¢ Verificar datos antes de procesar pagos
   ‚Ä¢ Los recibos se guardan en carpeta 'recibos/'
        """
        
        text_widget = tk.Text(
            scrollable_frame,
            wrap=tk.WORD,
            font=('Arial', 10),
            padx=10,
            pady=10
        )
        text_widget.insert("1.0", instructions_text)
        text_widget.config(state=tk.DISABLED)
        text_widget.pack(fill=tk.BOTH, expand=True)
        
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
        # Bot√≥n cerrar
        close_btn = tk.Button(
            instructions_window,
            text="Cerrar",
            command=instructions_window.destroy,
            bg='#95a5a6',
            fg='white',
            font=('Arial', 11)
        )
        close_btn.pack(pady=10)
    
    def show_about(self):
        """Muestra informaci√≥n sobre el sistema"""
        messagebox.showinfo(
            "Acerca del Sistema",
            "Sistema de Gesti√≥n de Agua Potable\n" +
            "Versi√≥n 1.0\n\n" +
            "Desarrollado en Python con Tkinter\n" +
            "Base de datos SQLite\n" +
            "Generaci√≥n de PDF con ReportLab\n\n" +
            "Caracter√≠sticas:\n" +
            "‚Ä¢ Gesti√≥n completa de usuarios\n" +
            "‚Ä¢ Registro de pagos mensuales\n" +
            "‚Ä¢ Conceptos adicionales de cobro\n" +
            "‚Ä¢ Generaci√≥n autom√°tica de recibos\n" +
            "‚Ä¢ Sistema de respaldos\n" +
            "‚Ä¢ Importaci√≥n desde CSV\n\n" +
            "¬© 2024 - Desarrollado para comit√©s de agua potable"
        )
    
    def on_closing(self):
        """Maneja el cierre de la aplicaci√≥n"""
        if messagebox.askokcancel("Salir", "¬øEst√° seguro de que desea salir del sistema?"):
            self.root.destroy()
    
    def run(self):
        """Ejecuta la aplicaci√≥n principal"""
        self.root.mainloop()


def main():
    """Funci√≥n principal de la aplicaci√≥n"""
    try:
        # Autenticar usuario
        if not authenticate():
            print("Autenticaci√≥n fallida. Cerrando aplicaci√≥n.")
            return
        
        # Crear y ejecutar la aplicaci√≥n principal
        app = MainApplication()
        app.run()
        
    except Exception as e:
        messagebox.showerror("Error Fatal", f"Error al iniciar la aplicaci√≥n: {str(e)}")


if __name__ == "__main__":
    main()